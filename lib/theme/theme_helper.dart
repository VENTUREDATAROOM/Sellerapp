import 'dart:ui';
import 'package:flutter/material.dart';
import '../../core/app_export.dart';

/// Helper class for managing themes and colors.
class ThemeHelper {
  // The current app theme
  var _appTheme = PrefUtils().getThemeData();

// A map of custom color themes supported by the app
  Map<String, PrimaryColors> _supportedCustomColor = {
    'primary': PrimaryColors()
  };

// A map of color schemes supported by the app
  Map<String, ColorScheme> _supportedColorScheme = {
    'primary': ColorSchemes.primaryColorScheme
  };

  /// Changes the app theme to [_newTheme].
  void changeTheme(String _newTheme) {
    PrefUtils().setThemeData(_newTheme);
    Get.forceAppUpdate();
  }

  /// Returns the primary colors for the current theme.
  PrimaryColors _getThemeColors() {
    //throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedCustomColor.containsKey(_appTheme)) {
      throw Exception(
          "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");
    }
    //return theme from map

    return _supportedCustomColor[_appTheme] ?? PrimaryColors();
  }

  /// Returns the current theme data.
  ThemeData _getThemeData() {
    //throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedColorScheme.containsKey(_appTheme)) {
      throw Exception(
          "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");
    }
    //return theme from map

    var colorScheme =
        _supportedColorScheme[_appTheme] ?? ColorSchemes.primaryColorScheme;
    return ThemeData(
      visualDensity: VisualDensity.standard,
      colorScheme: colorScheme,
      textTheme: TextThemes.textTheme(colorScheme),
      scaffoldBackgroundColor: colorScheme.onErrorContainer.withOpacity(1),
      elevatedButtonTheme: ElevatedButtonThemeData(
        style: ElevatedButton.styleFrom(
          backgroundColor: colorScheme.primary,
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(16.h),
          ),
          visualDensity: const VisualDensity(
            vertical: -4,
            horizontal: -4,
          ),
          padding: EdgeInsets.zero,
        ),
      ),
      outlinedButtonTheme: OutlinedButtonThemeData(
        style: OutlinedButton.styleFrom(
          backgroundColor: Colors.transparent,
          side: BorderSide(
            color: colorScheme.primary,
            width: 1.h,
          ),
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(13.h),
          ),
          visualDensity: const VisualDensity(
            vertical: -4,
            horizontal: -4,
          ),
          padding: EdgeInsets.zero,
        ),
      ),
      dividerTheme: DividerThemeData(
        thickness: 114,
        space: 114,
        color: appTheme.gray300,
      ),
    );
  }

  /// Returns the primary colors for the current theme.
  PrimaryColors themeColor() => _getThemeColors();

  /// Returns the current theme data.
  ThemeData themeData() => _getThemeData();
}

/// Class containing the supported text theme styles.
class TextThemes {
  static TextTheme textTheme(ColorScheme colorScheme) => TextTheme(
        bodyLarge: TextStyle(
          color: appTheme.black900,
          fontSize: 16.fSize,
          fontFamily: 'Raleway',
          fontWeight: FontWeight.w400,
        ),
        bodyMedium: TextStyle(
          color: appTheme.gray900.withOpacity(0.67),
          fontSize: 15.fSize,
          fontFamily: 'Nunito Sans',
          fontWeight: FontWeight.w300,
        ),
        bodySmall: TextStyle(
          color: colorScheme.primary,
          fontSize: 10.fSize,
          fontFamily: 'Inter',
          fontWeight: FontWeight.w400,
        ),
        displayLarge: TextStyle(
          color: appTheme.gray900,
          fontSize: 52.fSize,
          fontFamily: 'Raleway',
          fontWeight: FontWeight.w700,
        ),
        displayMedium: TextStyle(
          color: appTheme.gray900,
          fontSize: 50.fSize,
          fontFamily: 'Raleway',
          fontWeight: FontWeight.w700,
        ),
        headlineMedium: TextStyle(
          color: appTheme.gray900,
          fontSize: 28.fSize,
          fontFamily: 'Raleway',
          fontWeight: FontWeight.w700,
        ),
        labelLarge: TextStyle(
          color: appTheme.gray400,
          fontSize: 12.fSize,
          fontFamily: 'Raleway',
          fontWeight: FontWeight.w700,
        ),
        labelMedium: TextStyle(
          color: colorScheme.primary.withOpacity(0.65),
          fontSize: 10.fSize,
          fontFamily: 'Inter',
          fontWeight: FontWeight.w500,
        ),
        titleLarge: TextStyle(
          color: appTheme.gray100,
          fontSize: 22.fSize,
          fontFamily: 'Nunito Sans',
          fontWeight: FontWeight.w300,
        ),
        titleMedium: TextStyle(
          color: appTheme.black900,
          fontSize: 16.fSize,
          fontFamily: 'Raleway',
          fontWeight: FontWeight.w700,
        ),
        titleSmall: TextStyle(
          color: appTheme.blueGray100,
          fontSize: 14.fSize,
          fontFamily: 'Poppins',
          fontWeight: FontWeight.w500,
        ),
      );

  static const TextStyle buttonTextStyle = TextStyle(
      fontSize: 16.0, fontFamily: 'Raleway', fontWeight: FontWeight.w700);
}

/// Class containing the supported color schemes.
class ColorSchemes {
  static final primaryColorScheme = ColorScheme.light(
    // Primary colors
    primary: Color(0XFF4E6C16),
    primaryContainer: Color(0XFF171716),
    secondaryContainer: Color(0XFF5E5E5F),

    // Error colors
    errorContainer: Color(0XFFEC1313),
    onError: Color(0XFF6D6D6D),
    onErrorContainer: Color(0X59FFFFFF),

    // On colors(text colors)
    onPrimary: Color(0XFF0D0D0D),
    onPrimaryContainer: Color(0XFF8F92A1),
  );
}

/// Class containing custom colors for a primary theme.
class PrimaryColors {
  // Black
  Color get black900 => Color(0XFF000000);

  // BlueGray
  Color get blueGray100 => Color(0XFFD2D2D2);
  Color get blueGray900 => Color(0XFF333333);
  Color get blueGray90001 => Color(0XFF092342);

  // Gray
  Color get gray100 => Color(0XFFF3F3F3);
  Color get gray10001 => Color(0XFFF6F6F6);
  Color get gray200 => Color(0XFFF0F0F0);
  Color get gray20001 => Color(0XFFEBEBEB);
  Color get gray300 => Color(0XFFDDDDDD);
  Color get gray30001 => Color(0XFFDBDBDB);
  Color get gray400 => Color(0XFFC1C1C1);
  Color get gray50 => Color(0XFFF8F8F8);
  Color get gray500 => Color(0XFF999999);
  Color get gray600 => Color(0XFF757575);
  Color get gray60001 => Color(0XFF7C7C7C);
  Color get gray60002 => Color(0XFF767676);
  Color get gray900 => Color(0XFF202020);
  Color get gray90001 => Color(0XFF1E1E1E);

  // GrayCc
  Color get gray500Cc => Color(0XCCA3B287);

  // GreenCc
  Color get green50Cc => Color(0XCCEBEEE6);

  // Indigo
  Color get indigo50 => Color(0XFFE5EBFC);

  // LightGreen
  Color get lightGreen100 => Color(0XFFE1EABC);
  Color get lightGreenA70033 => Color(0X3377B10C);

  // LightGreenCc
  Color get lightGreen200Cc => Color(0XCCCEE3A7);
  Color get lightGreen300Cc => Color(0XCCA8BC83);

  // Orange
  Color get orange50 => Color(0XFFFFF8D8);

  // Red
  Color get red100 => Color(0XFFFFD0D0);
  Color get red400 => Color(0XFFEC4E4E);
  Color get red40001 => Color(0XFFF55951);
  Color get red500 => Color(0XFFFC3434);

  Color get redmono => Color(0XFFCA927F);

  // White
  Color get whiteA700 => Color(0XFFFCFCFE);
}

PrimaryColors get appTheme => ThemeHelper().themeColor();
ThemeData get theme => ThemeHelper().themeData();
